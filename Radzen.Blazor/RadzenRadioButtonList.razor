@using Radzen.Blazor.Rendering
@using System.Linq
@using System.Collections
@using Radzen
@using Microsoft.AspNetCore.Components.Forms
@typeparam TValue
@inherits FormComponent<TValue>

@if (Items != null)
{
    <CascadingValue Value=this>
        @Items
    </CascadingValue>
}
@if (Visible)
{
    <div @ref="@Element" style="@Style" @attributes="Attributes" class="@GetCssClass()" id="@GetId()">
        @foreach (var item in allItems.Where(i => i.Visible))
        {
            <div class="rz-radio-btn" @onclick="@(args => SelectItem(item))" @attributes="item.Attributes" style="@item.Style">
                <div class="rz-radiobutton" @onkeypress="@(async args => { if (args.Code == "Space") { await SelectItem(item); } })" tabindex="@TabIndex">
                    <div class="rz-helper-hidden-accessible">
                        <input type="radio" disabled="@Disabled" name="@Name" value="@item.Value" tabindex="-1">
                    </div>
                    <div class=@ItemClassList(item)>
                        <span class=@IconClassList(item)></span>
                    </div>
                </div>
                <label class="rz-radiobutton-label">@item.Text</label>
            </div>
        }
    </div>
}

@code {
    ClassList ItemClassList(RadzenRadioButtonListItem<TValue> item) => ClassList.Create("rz-radiobutton-box")
                                                                        .Add("rz-state-active", IsSelected(item))
                                                                        .AddDisabled(Disabled || item.Disabled);

    ClassList IconClassList(RadzenRadioButtonListItem<TValue> item) => ClassList.Create("rz-radiobutton-icon")
                                                                        .Add("rzi rzi-circle-on", IsSelected(item));
    [Parameter]
    public string ValueProperty { get; set; }

    [Parameter]
    public string TextProperty { get; set; }
    
    [Parameter]
    public string DisabledProperty { get; set; }

    [Parameter]
    public string VisibleProperty { get; set; }

    IEnumerable<RadzenRadioButtonListItem<TValue>> allItems
    {
        get
        {
            return items.Concat((Data != null ? Data.Cast<object>() : Enumerable.Empty<object>()).Select(i =>
            {
                var item = new RadzenRadioButtonListItem<TValue>();
                item.SetText((string)PropertyAccess.GetItemOrValueFromProperty(i, TextProperty));
                item.SetValue((TValue)PropertyAccess.GetItemOrValueFromProperty(i, ValueProperty));

                if (DisabledProperty != null && PropertyAccess.TryGetItemOrValueFromProperty<bool>(i, DisabledProperty, out var disabledResult))
                {
                    item.SetDisabled(disabledResult);
                }

                if (VisibleProperty != null && PropertyAccess.TryGetItemOrValueFromProperty<bool>(i, VisibleProperty, out var visibleResult))
                {
                    item.SetVisible(visibleResult);
                }

                return item;
            }));
        }
    }

    IEnumerable _data = null;
    [Parameter]
    public virtual IEnumerable Data
    {
        get
        {
            return _data;
        }
        set
        {
            if (_data != value)
            {
                _data = value;
                StateHasChanged();
            }
        }
    }

    protected override string GetComponentCssClass()
    {
        return GetClassList(Orientation == Orientation.Horizontal ? "rz-radio-button-list-horizontal" : "rz-radio-button-list-vertical").ToString();
    }

    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Horizontal;

    [Parameter]
    public RenderFragment Items { get; set; }

    List<RadzenRadioButtonListItem<TValue>> items = new List<RadzenRadioButtonListItem<TValue>>();

    public void AddItem(RadzenRadioButtonListItem<TValue> item)
    {
        if (items.IndexOf(item) == -1)
        {
            items.Add(item);
            StateHasChanged();
        }
    }

    public void RemoveItem(RadzenRadioButtonListItem<TValue> item)
    {
        if (items.Contains(item))
        {
            items.Remove(item);
            try
            { InvokeAsync(StateHasChanged); }
            catch { }
        }
    }

    protected bool IsSelected(RadzenRadioButtonListItem<TValue> item)
    {
        return object.Equals(Value, item.Value);
    }

    protected async System.Threading.Tasks.Task SelectItem(RadzenRadioButtonListItem<TValue> item)
    {
        if (Disabled || item.Disabled)
            return;

        Value = item.Value;

        await ValueChanged.InvokeAsync(Value);
        if (FieldIdentifier.FieldName != null)
        { EditContext?.NotifyFieldChanged(FieldIdentifier); }
        await Change.InvokeAsync(Value);

        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}